/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/createElement.js":
/*!******************************!*\
  !*** ./src/createElement.js ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\nclass newElement {\n    static createElement(selector, classNames) {\n        const element = document.createElement(selector);\n\n        if (classNames !== undefined) {\n            if (Array.isArray(classNames)) {\n                for (let i = 0; i < classNames.length; i += 1) {\n                    element.classList.add(classNames[i]);\n                }\n            } else {\n                element.classList.add(classNames);\n            }\n        }\n        return element;\n    }\n}\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (newElement);\n\n\n//# sourceURL=webpack://project-battleship/./src/createElement.js?");

/***/ }),

/***/ "./src/gameboard/gameBoard.js":
/*!************************************!*\
  !*** ./src/gameboard/gameBoard.js ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _ship_shipMessage__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../ship/shipMessage */ \"./src/ship/shipMessage.js\");\n/* eslint-disable max-len */\n/* eslint-disable class-methods-use-this */\n\n\n\n/* eslint-disable no-unused-expressions */\nclass GameBoard {\n    constructor() {\n        this.boardState = [];\n        this.ships = [];\n        this.createBoard();\n    }\n\n    createBoard() {\n        for (let i = 0; i < _ship_shipMessage__WEBPACK_IMPORTED_MODULE_0__.BoardSize; i += 1) {\n            const newRow = [];\n            for (let j = 0; j < _ship_shipMessage__WEBPACK_IMPORTED_MODULE_0__.BoardSize; j += 1) {\n                newRow.push(_ship_shipMessage__WEBPACK_IMPORTED_MODULE_0__.BoardSpaceStatus.empty);\n            }\n            this.boardState.push(newRow);\n        }\n    }\n    // if empty space return true\n\n    isSpaceEmpty(row, col) {\n        if (this.boardState[row][col] === _ship_shipMessage__WEBPACK_IMPORTED_MODULE_0__.BoardSpaceStatus.empty) return true;\n\n        return false;\n    }\n\n    //  if in bounds return true\n    static isSpaceInBounds(row, col) {\n        if (\n            row >= _ship_shipMessage__WEBPACK_IMPORTED_MODULE_0__.BoardSize\n            || row < 0\n            || col >= _ship_shipMessage__WEBPACK_IMPORTED_MODULE_0__.BoardSize\n            || col < 0\n        ) {\n            return false;\n        }\n        return true;\n    }\n\n    resetBoard() {\n        for (let i = 0; i < _ship_shipMessage__WEBPACK_IMPORTED_MODULE_0__.BoardSize; i += 1) {\n            for (let j = 0; j < _ship_shipMessage__WEBPACK_IMPORTED_MODULE_0__.BoardSize; j += 1) {\n                this.boardState[i][j] = _ship_shipMessage__WEBPACK_IMPORTED_MODULE_0__.BoardSpaceStatus.empty;\n            }\n        }\n        while (this.ships.length > 0) {\n            this.ships.pop();\n        }\n    }\n\n    isValidPlacement(ship, row, col, direction) {\n        if (!GameBoard.isSpaceInBounds(row, col)) {\n            return false;\n        }\n\n        const coordsToCheck = GameBoard.getCoordsToCheck(ship, row, col, direction);\n\n        for (let i = 0; i < coordsToCheck.length; i += 1) {\n            if (!GameBoard.isSpaceInBounds(coordsToCheck[i].rowVar, coordsToCheck[i].colVar)) {\n                return false;\n            }\n            if (!this.isSpaceEmpty(coordsToCheck[i].rowVar, coordsToCheck[i].colVar)) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    static getCoordsToCheck(ship, row, col, direction) {\n        const coordsToCheck = [];\n        let rowVar = row;\n        let colVar = col;\n        for (let i = 0; i < ship.length; i += 1) {\n            coordsToCheck.push({ rowVar, colVar });\n\n            switch (direction) {\n            case _ship_shipMessage__WEBPACK_IMPORTED_MODULE_0__.Direction.right: {\n                colVar += 1;\n                break;\n            }\n            case _ship_shipMessage__WEBPACK_IMPORTED_MODULE_0__.Direction.left: {\n                colVar -= 1;\n                break;\n            }\n            case _ship_shipMessage__WEBPACK_IMPORTED_MODULE_0__.Direction.up: {\n                rowVar -= 1;\n                break;\n            }\n            case _ship_shipMessage__WEBPACK_IMPORTED_MODULE_0__.Direction.down: {\n                rowVar += 1;\n                break;\n            }\n\n            default: {\n                break;\n            }\n            }\n        }\n        return coordsToCheck;\n    }\n\n    // return true if ship is in valid spot, false if not\n    addShip(ship, row, col, direction) {\n        if (!this.isValidPlacement(ship, row, col, direction)) {\n            return false;\n        }\n        this.ships.push({\n            ship, row, col, direction,\n        });\n\n        const coordsToCheck = GameBoard.getCoordsToCheck(ship, row, col, direction);\n        for (let i = 0; i < coordsToCheck.length; i += 1) {\n            this.boardState[coordsToCheck[i].rowVar][coordsToCheck[i].colVar] = _ship_shipMessage__WEBPACK_IMPORTED_MODULE_0__.BoardSpaceStatus.ship;\n        }\n\n        return true;\n    }\n\n    receiveAttack(row, col) {\n        if (!GameBoard.isSpaceInBounds(row, col)) {\n            return _ship_shipMessage__WEBPACK_IMPORTED_MODULE_0__.AttackStatus.invalid;\n        }\n        if (\n            this.boardState[row][col] === _ship_shipMessage__WEBPACK_IMPORTED_MODULE_0__.BoardSpaceStatus.emptyHit\n            || this.boardState[row][col] === _ship_shipMessage__WEBPACK_IMPORTED_MODULE_0__.BoardSpaceStatus.shipHit\n        ) {\n            return _ship_shipMessage__WEBPACK_IMPORTED_MODULE_0__.AttackStatus.invalid;\n        }\n        // A valid attack must be to an empty space, or a ship in a position it hasn't been hit\n        if (this.boardState[row][col] === _ship_shipMessage__WEBPACK_IMPORTED_MODULE_0__.BoardSpaceStatus.empty) {\n            this.boardState[row][col] = _ship_shipMessage__WEBPACK_IMPORTED_MODULE_0__.BoardSpaceStatus.emptyHit;\n            return _ship_shipMessage__WEBPACK_IMPORTED_MODULE_0__.AttackStatus.miss;\n        }\n        if (this.boardState[row][col] === _ship_shipMessage__WEBPACK_IMPORTED_MODULE_0__.BoardSpaceStatus.ship) {\n            this.boardState[row][col] = _ship_shipMessage__WEBPACK_IMPORTED_MODULE_0__.BoardSpaceStatus.shipHit;\n\n            let hitStatus;\n            for (let i = 0; i < this.ships.length; i += 1) {\n                hitStatus = GameBoard.checkIfShotIsInShipBounds(\n                    row,\n                    col,\n                    this.ships[i],\n                );\n\n                if (hitStatus.hit) {\n                    this.ships[i].ship.hit(hitStatus.position);\n                    this.boardState[row][col] = _ship_shipMessage__WEBPACK_IMPORTED_MODULE_0__.BoardSpaceStatus.shipHit;\n                    if (this.ships[i].ship.isSunk) {\n                        this.boardState[row][col] = _ship_shipMessage__WEBPACK_IMPORTED_MODULE_0__.BoardSpaceStatus.shipSunk;\n\n                        const coords = GameBoard.getShipCoords(this.ships[i]);\n                        for (let j = 0; j < coords.length; j += 1) {\n                            this.boardState[coords[j].row][coords[j].col] = _ship_shipMessage__WEBPACK_IMPORTED_MODULE_0__.BoardSpaceStatus.shipSunk;\n                        }\n\n                        return _ship_shipMessage__WEBPACK_IMPORTED_MODULE_0__.AttackStatus.sunk;\n                    }\n\n                    break;\n                }\n            }\n\n            return _ship_shipMessage__WEBPACK_IMPORTED_MODULE_0__.AttackStatus.hit;\n        }\n\n        return _ship_shipMessage__WEBPACK_IMPORTED_MODULE_0__.AttackStatus.invalid;\n    }\n\n    static getShipCoords(ship) {\n        const coords = [];\n        let { row } = ship;\n        let { col } = ship;\n        coords.push({ row, col });\n\n        for (let i = 0; i < ship.ship.length; i += 1) {\n            switch (ship.direction) {\n            case _ship_shipMessage__WEBPACK_IMPORTED_MODULE_0__.Direction.down: {\n                row += 1;\n                break;\n            }\n            case _ship_shipMessage__WEBPACK_IMPORTED_MODULE_0__.Direction.up: {\n                row -= 1;\n                break;\n            }\n            case _ship_shipMessage__WEBPACK_IMPORTED_MODULE_0__.Direction.right: {\n                col += 1;\n                break;\n            }\n            case _ship_shipMessage__WEBPACK_IMPORTED_MODULE_0__.Direction.left: {\n                col -= 1;\n                break;\n            }\n            default:\n                break;\n            }\n            coords.push({ row, col });\n        }\n        return coords;\n    }\n\n    static checkIfShotIsInShipBounds(row, col, shipInfo) {\n        let checkRow = shipInfo.row;\n        let checkCol = shipInfo.col;\n\n        switch (shipInfo.direction) {\n        case _ship_shipMessage__WEBPACK_IMPORTED_MODULE_0__.Direction.right: {\n            for (let i = 0; i < shipInfo.ship.length; i += 1) {\n                if (checkRow === row && checkCol === col) {\n                    return { hit: true, position: i };\n                }\n                checkCol += 1;\n            }\n            break;\n        }\n        case _ship_shipMessage__WEBPACK_IMPORTED_MODULE_0__.Direction.left: {\n            for (let i = 0; i < shipInfo.ship.length; i += 1) {\n                if (checkRow === row && checkCol === col) {\n                    return { hit: true, position: i };\n                }\n                checkCol -= 1;\n            }\n            break;\n        }\n        case _ship_shipMessage__WEBPACK_IMPORTED_MODULE_0__.Direction.down: {\n            for (let i = 0; i < shipInfo.ship.length; i += 1) {\n                if (checkRow === row && checkCol === col) {\n                    return { hit: true, position: i };\n                }\n                checkRow += 1;\n            }\n            break;\n        }\n        case _ship_shipMessage__WEBPACK_IMPORTED_MODULE_0__.Direction.up: {\n            for (let i = 0; i < shipInfo.ship.length; i += 1) {\n                if (checkRow === row && checkCol === col) {\n                    return { hit: true, position: i };\n                }\n                checkRow -= 1;\n            }\n            break;\n        }\n        default: {\n            break;\n        }\n        }\n        return { hit: false, position: -1 };\n    }\n\n    checkAllShipsSunk() {\n        let allShipsSunk = true;\n        for (let i = 0; i < this.ships.length; i += 1) {\n            if (!this.ships[i].ship.isSunk) {\n                allShipsSunk = false;\n            }\n        }\n        return allShipsSunk;\n    }\n}\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (GameBoard);\n\n\n//# sourceURL=webpack://project-battleship/./src/gameboard/gameBoard.js?");

/***/ }),

/***/ "./src/gameboard/gameManager.js":
/*!**************************************!*\
  !*** ./src/gameboard/gameManager.js ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _gameBoard__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./gameBoard */ \"./src/gameboard/gameBoard.js\");\n/* harmony import */ var _ship_createShips__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ship/createShips */ \"./src/ship/createShips.js\");\n/* harmony import */ var _ship_ship__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../ship/ship */ \"./src/ship/ship.js\");\n/* harmony import */ var _ship_shipMessage__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../ship/shipMessage */ \"./src/ship/shipMessage.js\");\n\n\n\n\n\nclass GameManager {\n    constructor() {\n        this.clickSquare = this.clickSquare.bind(this);\n        this.hoverSquare = this.hoverSquare.bind(this);\n        this.leaveSquare = this.leaveSquare.bind(this);\n        this.receiveMessage = this.receiveMessage.bind(this);\n        this.rotateShip = this.rotateShip.bind(this);\n        this.startCpuTurn = this.startCpuTurn.bind(this);\n        this.setPlacementIndex = this.setPlacementIndex.bind(this);\n\n        const playerCarrier = new _ship_ship__WEBPACK_IMPORTED_MODULE_2__[\"default\"](5);\n        const playerBattleship = new _ship_ship__WEBPACK_IMPORTED_MODULE_2__[\"default\"](4);\n        const playerSubmarine = new _ship_ship__WEBPACK_IMPORTED_MODULE_2__[\"default\"](3);\n        const playerCruiser = new _ship_ship__WEBPACK_IMPORTED_MODULE_2__[\"default\"](3);\n        const playerDestroyer = new _ship_ship__WEBPACK_IMPORTED_MODULE_2__[\"default\"](2);\n\n        this.playerShips = [\n            playerCarrier,\n            playerBattleship,\n            playerSubmarine,\n            playerCruiser,\n            playerDestroyer,\n        ];\n\n        const fleetDom = this.playerShips.map(GameManager.shipsToFleetDom);\n\n        this.battleshipDom = new _ship_createShips__WEBPACK_IMPORTED_MODULE_1__[\"default\"](fleetDom);\n        this.battleshipDom.setClickEventHandler(this.clickSquare);\n        this.battleshipDom.setHoverEventHandler(this.hoverSquare);\n        this.battleshipDom.setMouseLeaveEventHandler(this.leaveSquare);\n        this.battleshipDom.setMessageFunction(this.receiveMessage);\n        this.battleshipDom.setRightClickEventHandler(this.rotateShip);\n        this.battleshipDom.setShip(this.setPlacementIndex);\n\n        this.testMode = false;\n        this.playerWon = false;\n    }\n\n    static shipsToFleetDom(element, i) {\n        return { length: element.length, name: _ship_shipMessage__WEBPACK_IMPORTED_MODULE_3__.ShipNames[i] };\n    }\n\n    init() {\n        this.placementDirection = _ship_shipMessage__WEBPACK_IMPORTED_MODULE_3__.Direction.right;\n        this.placementComplete = new Array(this.playerShips.length);\n        for (let i = 0; i < this.placementComplete.length; i += 1) {\n            this.placementComplete[i] = false;\n        }\n\n        for (let i = 0; i < this.playerShips.length; i += 1) {\n            this.playerShips[i].reset();\n        }\n\n        this.setPlacementIndex(0);\n\n        this.playerBoard = new _gameBoard__WEBPACK_IMPORTED_MODULE_0__[\"default\"]();\n        this.cpuBoard = new _gameBoard__WEBPACK_IMPORTED_MODULE_0__[\"default\"]();\n\n        this.battleshipDom.reset();\n        this.battleshipDom.setCpuBoard(this.cpuBoard.boardState);\n        this.battleshipDom.setPlayerBoard(this.playerBoard.boardState);\n        this.battleshipDom.displayMessage('');\n\n        this.updateDomShipProxy();\n\n        this.gameState = _ship_shipMessage__WEBPACK_IMPORTED_MODULE_3__.GameState.placingShips;\n    }\n\n    // set testMode(value) {\n    //     this.testMode = value;\n    // }\n\n    startGame() {\n        if (this.testMode) {\n            this.doTestSetup();\n        } else {\n            this.doSetup();\n        }\n    }\n\n    doTestSetup() {\n        const playerCarrier = new _ship_ship__WEBPACK_IMPORTED_MODULE_2__[\"default\"](5);\n        const playerBattleship = new _ship_ship__WEBPACK_IMPORTED_MODULE_2__[\"default\"](4);\n        const playerSubmarine = new _ship_ship__WEBPACK_IMPORTED_MODULE_2__[\"default\"](3);\n        const playerCruiser = new _ship_ship__WEBPACK_IMPORTED_MODULE_2__[\"default\"](3);\n        const playerDestroyer = new _ship_ship__WEBPACK_IMPORTED_MODULE_2__[\"default\"](2);\n\n        const cpuCarrier = new _ship_ship__WEBPACK_IMPORTED_MODULE_2__[\"default\"](5);\n        const cpuBattleship = new _ship_ship__WEBPACK_IMPORTED_MODULE_2__[\"default\"](4);\n        const cpuSubmarine = new _ship_ship__WEBPACK_IMPORTED_MODULE_2__[\"default\"](3);\n        const cpuCruiser = new _ship_ship__WEBPACK_IMPORTED_MODULE_2__[\"default\"](3);\n        const cpuDestroyer = new _ship_ship__WEBPACK_IMPORTED_MODULE_2__[\"default\"](2);\n\n        this.playerBoard.addShip(playerCarrier, 0, 0, _ship_shipMessage__WEBPACK_IMPORTED_MODULE_3__.Direction.down);\n        this.playerBoard.addShip(playerBattleship, 0, 1, _ship_shipMessage__WEBPACK_IMPORTED_MODULE_3__.Direction.down);\n        this.playerBoard.addShip(playerSubmarine, 0, 2, _ship_shipMessage__WEBPACK_IMPORTED_MODULE_3__.Direction.down);\n        this.playerBoard.addShip(playerCruiser, 0, 3, _ship_shipMessage__WEBPACK_IMPORTED_MODULE_3__.Direction.down);\n        this.playerBoard.addShip(playerDestroyer, 0, 4, _ship_shipMessage__WEBPACK_IMPORTED_MODULE_3__.Direction.down);\n\n        this.cpuBoard.addShip(cpuCarrier, 7, 0, _ship_shipMessage__WEBPACK_IMPORTED_MODULE_3__.Direction.up);\n        this.cpuBoard.addShip(cpuBattleship, 7, 1, _ship_shipMessage__WEBPACK_IMPORTED_MODULE_3__.Direction.up);\n        this.cpuBoard.addShip(cpuSubmarine, 7, 2, _ship_shipMessage__WEBPACK_IMPORTED_MODULE_3__.Direction.up);\n        this.cpuBoard.addShip(cpuCruiser, 7, 3, _ship_shipMessage__WEBPACK_IMPORTED_MODULE_3__.Direction.up);\n        this.cpuBoard.addShip(cpuDestroyer, 7, 4, _ship_shipMessage__WEBPACK_IMPORTED_MODULE_3__.Direction.up);\n    }\n\n    doSetup() {\n        const cpuCarrier = new _ship_ship__WEBPACK_IMPORTED_MODULE_2__[\"default\"](5);\n        const cpuBattleship = new _ship_ship__WEBPACK_IMPORTED_MODULE_2__[\"default\"](4);\n        const cpuSubmarine = new _ship_ship__WEBPACK_IMPORTED_MODULE_2__[\"default\"](3);\n        const cpuCruiser = new _ship_ship__WEBPACK_IMPORTED_MODULE_2__[\"default\"](3);\n        const cpuDestroyer = new _ship_ship__WEBPACK_IMPORTED_MODULE_2__[\"default\"](2);\n\n        GameManager.randomizeShipPlacement([\n            cpuCarrier,\n            cpuBattleship,\n            cpuSubmarine,\n            cpuCruiser,\n            cpuDestroyer,\n        ], this.cpuBoard);\n\n        this.battleshipDom.setPlayerBoard(this.playerBoard.boardState);\n        this.battleshipDom.setCpuBoard(this.cpuBoard.boardState);\n    }\n\n    static randomizeShipPlacement(ships, board) {\n        for (let i = 0; i < ships.length; i += 1) {\n            let validPlacement = false;\n\n            while (!validPlacement) {\n                const row = Math.round(Math.random() * 7);\n                const col = Math.round(Math.random() * 7);\n                const dir = Math.round(Math.random() * 3);\n\n                validPlacement = board.addShip(ships[i], row, col, dir);\n            }\n        }\n    }\n\n    gameEnd() {\n        if (this.playerBoard.checkAllShipsSunk()) {\n            this.playerWon = false;\n            return true;\n        }\n        if (this.cpuBoard.checkAllShipsSunk()) {\n            this.playerWon = true;\n            return true;\n        }\n        return false;\n    }\n\n    // logic for when player clicks a square\n    clickSquare(e) {\n        if (this.gameState === _ship_shipMessage__WEBPACK_IMPORTED_MODULE_3__.GameState.playerTurn) {\n            if (e.target.dataset.board === 'cpu') {\n                this.playerSelection({\n                    row: Number(e.target.dataset.row),\n                    col: Number(e.target.dataset.col),\n                });\n            }\n        } else if (this.gameState === _ship_shipMessage__WEBPACK_IMPORTED_MODULE_3__.GameState.placingShips) {\n            if (e.target.dataset.board === 'player') {\n                if (\n                    this.playerBoard.isValidPlacement(\n                        this.playerShips[this.placeShipIndex],\n                        Number(e.target.dataset.row),\n                        Number(e.target.dataset.col),\n                        this.placementDirection,\n                    )\n                ) {\n                    this.playerBoard.addShip(\n                        this.playerShips[this.placeShipIndex],\n                        Number(e.target.dataset.row),\n                        Number(e.target.dataset.col),\n                        this.placementDirection,\n                    );\n\n                    this.placementComplete[this.placeShipIndex] = true;\n                    this.battleshipDom.removeFleetButton(this.placeShipIndex);\n\n                    let allTrue = true;\n                    for (let i = 0; i < this.placementComplete.length; i += 1) {\n                        if (this.placementComplete[i] === false) {\n                            this.placeShipIndex = i;\n                            allTrue = false;\n                            break;\n                        }\n                    }\n                    this.battleshipDom.setPlayerBoard(this.playerBoard.boardState);\n\n                    if (allTrue) {\n                        this.gameState = _ship_shipMessage__WEBPACK_IMPORTED_MODULE_3__.GameState.preGame;\n                    } else {\n                        this.updatePostShipSelect();\n                    }\n                }\n            }\n        }\n    }\n\n    updatePostShipSelect() {\n        const message = `Place your ${_ship_shipMessage__WEBPACK_IMPORTED_MODULE_3__.ShipNames[this.placeShipIndex]}`;\n        this.battleshipDom.displayMessage(message);\n        this.battleshipDom.highlightFleetButton(this.placeShipIndex);\n        this.updateDomShipProxy();\n    }\n\n    updateDomShipProxy() {\n        this.battleshipDom.rotateTestShip(\n            this.playerShips[this.placeShipIndex].length,\n            this.placementDirection,\n        );\n    }\n\n    hoverSquare(e) {\n        if (this.gameState === _ship_shipMessage__WEBPACK_IMPORTED_MODULE_3__.GameState.placingShips) {\n            if (\n                e.target.dataset.row !== this.cachedRow\n                || e.target.dataset.col !== this.cachedCol\n            ) {\n                this.battleshipDom.removeHighlightSquares();\n            }\n            this.cachedRow = e.target.dataset.row;\n            this.cachedCol = e.target.dataset.col;\n\n            if (e.target.classList.contains('battleship-square')) {\n                const row = Number(e.target.dataset.row);\n                const col = Number(e.target.dataset.col);\n                if (\n                    this.playerBoard.isValidPlacement(\n                        this.playerShips[this.placeShipIndex],\n                        row,\n                        col,\n                        this.placementDirection,\n                    )\n                ) {\n                    const squaresToHighlight = _gameBoard__WEBPACK_IMPORTED_MODULE_0__[\"default\"].getCoordsToCheck(\n                        this.playerShips[this.placeShipIndex],\n                        row,\n                        col,\n                        this.placementDirection,\n                    );\n                    this.battleshipDom.highlightSquares(squaresToHighlight, true);\n                } else {\n                    const squaresToHighlight = _gameBoard__WEBPACK_IMPORTED_MODULE_0__[\"default\"].getCoordsToCheck(\n                        this.playerShips[this.placeShipIndex],\n                        row,\n                        col,\n                        this.placementDirection,\n                    );\n                    this.battleshipDom.highlightSquares(squaresToHighlight, false);\n                }\n            }\n        }\n    }\n\n    leaveSquare() {\n        if (this.gameState === _ship_shipMessage__WEBPACK_IMPORTED_MODULE_3__.GameState.placingShips) {\n            this.battleshipDom.removeHighlightSquares();\n        }\n    }\n\n    rotateShip(e) {\n        if (e != null && e !== undefined) {\n            e.preventDefault();\n        }\n\n        if (this.placementDirection !== _ship_shipMessage__WEBPACK_IMPORTED_MODULE_3__.Direction.up) {\n            this.placementDirection += 1;\n        } else {\n            this.placementDirection = _ship_shipMessage__WEBPACK_IMPORTED_MODULE_3__.Direction.right;\n        }\n\n        if (e !== null && e !== undefined) {\n            this.leaveSquare();\n            this.hoverSquare(e);\n        }\n\n        this.updateDomShipProxy();\n        return false;\n    }\n\n    playerSelection(selection) {\n        const selectionStatus = this.cpuBoard.receiveAttack(\n            selection.row,\n            selection.col,\n        );\n\n        if (selectionStatus !== _ship_shipMessage__WEBPACK_IMPORTED_MODULE_3__.AttackStatus.invalid) {\n            this.gameState = _ship_shipMessage__WEBPACK_IMPORTED_MODULE_3__.GameState.transition;\n            this.setDomPlayerMove(selection.row, selection.col, selectionStatus);\n\n            if (this.gameEnd()) {\n                this.doGameEnd();\n            } else {\n                this.gameState = _ship_shipMessage__WEBPACK_IMPORTED_MODULE_3__.GameState.cpuTurn;\n                setTimeout(this.startCpuTurn, 300);\n            }\n        }\n    }\n\n    setDomPlayerMove(row, col, status) {\n        this.battleshipDom.getPlayerMove(row, col, status);\n    }\n\n    startCpuTurn() {\n        let selectionStatus = _ship_shipMessage__WEBPACK_IMPORTED_MODULE_3__.AttackStatus.invalid;\n        let row = -1;\n        let col = -1;\n        while (selectionStatus === _ship_shipMessage__WEBPACK_IMPORTED_MODULE_3__.AttackStatus.invalid) {\n            row = Math.round(Math.random() * 7);\n            col = Math.round(Math.random() * 7);\n\n            selectionStatus = this.playerBoard.receiveAttack(row, col);\n        }\n\n        this.gameState = _ship_shipMessage__WEBPACK_IMPORTED_MODULE_3__.GameState.transition;\n        this.setDomCpuMove(row, col, selectionStatus);\n\n        if (this.gameEnd()) {\n            this.doGameEnd();\n        } else {\n            this.gameState = _ship_shipMessage__WEBPACK_IMPORTED_MODULE_3__.GameState.playerTurn;\n        }\n    }\n\n    setDomCpuMove(row, col, status) {\n        this.battleshipDom.getCpuMove(row, col, status);\n    }\n\n    doGameEnd() {\n        this.gameState = _ship_shipMessage__WEBPACK_IMPORTED_MODULE_3__.GameState.gameEnd;\n        let stateWin = '';\n        if (this.playerWon) {\n            stateWin = 'You Won!';\n        } else {\n            stateWin = 'You Lose.';\n        }\n        this.battleshipDom.displayMessage(`Game Over. ${stateWin}`);\n    }\n\n    receiveMessage(msg) {\n        switch (msg) {\n        case _ship_shipMessage__WEBPACK_IMPORTED_MODULE_3__.GameMessages.StartGame: {\n            this.battleshipDom.setGameplayElements();\n            this.init();\n            break;\n        }\n        case _ship_shipMessage__WEBPACK_IMPORTED_MODULE_3__.GameMessages.DrawCpuBoard: {\n            this.battleshipDom.setCpuBoard(this.cpuBoard.boardState);\n            break;\n        }\n        case _ship_shipMessage__WEBPACK_IMPORTED_MODULE_3__.GameMessages.DrawPlayerBoard: {\n            this.battleshipDom.setPlayerBoard(this.playerBoard.boardState);\n            break;\n        }\n        case _ship_shipMessage__WEBPACK_IMPORTED_MODULE_3__.GameMessages.ResetGame: {\n            this.resetMessage();\n            break;\n        }\n        case _ship_shipMessage__WEBPACK_IMPORTED_MODULE_3__.GameMessages.Rotate: {\n            if (this.gameState === _ship_shipMessage__WEBPACK_IMPORTED_MODULE_3__.GameState.placingShips) {\n                this.rotateShip();\n                this.updateDomShipProxy();\n            }\n            break;\n        }\n        default:\n            break;\n        }\n    }\n\n    resetMessage() {\n        this.gameState = _ship_shipMessage__WEBPACK_IMPORTED_MODULE_3__.GameState.reset;\n        this.init();\n        this.battleshipDom.removeAllFleetButtons();\n        this.battleshipDom.addFleetButtons();\n        this.setPlacementIndex(0);\n    }\n\n    setPlacementIndex(indexValue) {\n        if (this.placementComplete[indexValue] === false) {\n            this.placeShipIndex = indexValue;\n            this.updatePostShipSelect();\n        }\n    }\n\n    // proxy for tests\n    set gameState(value) {\n        this.testGameState = value;\n\n        if (this.gameState === _ship_shipMessage__WEBPACK_IMPORTED_MODULE_3__.GameState.preGame) {\n            this.gameState = _ship_shipMessage__WEBPACK_IMPORTED_MODULE_3__.GameState.gameStart;\n            this.startGame();\n            this.battleshipDom.displayMessage('Attack your opponent');\n        }\n        if (this.gameState === _ship_shipMessage__WEBPACK_IMPORTED_MODULE_3__.GameState.reset) {\n            this.battleshipDom.normalPlayerBoard();\n            this.battleshipDom.showPlacementOptions();\n        } else if (this.gameState === _ship_shipMessage__WEBPACK_IMPORTED_MODULE_3__.GameState.gameStart) {\n            this.battleshipDom.smallPlayerBoard();\n            this.battleshipDom.hidePlacementOptions();\n            this.gameState = _ship_shipMessage__WEBPACK_IMPORTED_MODULE_3__.GameState.playerTurn;\n        } else if (this.gameState === _ship_shipMessage__WEBPACK_IMPORTED_MODULE_3__.GameState.placingShips) {\n            const message = `Place your ${_ship_shipMessage__WEBPACK_IMPORTED_MODULE_3__.ShipNames[this.placeShipIndex]}`;\n            this.battleshipDom.displayMessage(message);\n            // only show player board when placing ships\n            this.battleshipDom.hideCpuBoard();\n        } else if (this.gameState === _ship_shipMessage__WEBPACK_IMPORTED_MODULE_3__.GameState.playerTurn) {\n            this.battleshipDom.showCpuBoard();\n        } else if (this.gameState === _ship_shipMessage__WEBPACK_IMPORTED_MODULE_3__.GameState.transition) {\n            this.battleshipDom.displayMessage('');\n        }\n    }\n\n    get gameState() {\n        return this.testGameState;\n    }\n}\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (GameManager);\n\n\n//# sourceURL=webpack://project-battleship/./src/gameboard/gameManager.js?");

/***/ }),

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _gameboard_gameManager__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./gameboard/gameManager */ \"./src/gameboard/gameManager.js\");\n\n\nconst newGame = new _gameboard_gameManager__WEBPACK_IMPORTED_MODULE_0__[\"default\"]();\n\n\n//# sourceURL=webpack://project-battleship/./src/index.js?");

/***/ }),

/***/ "./src/ship/createShips.js":
/*!*********************************!*\
  !*** ./src/ship/createShips.js ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _createElement__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../createElement */ \"./src/createElement.js\");\n/* harmony import */ var _shipMessage__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./shipMessage */ \"./src/ship/shipMessage.js\");\n\n\n\nclass ShipDom {\n    constructor(domFleet) {\n        this.domFleet = domFleet;\n        this.sendMessage = null;\n        this.resetGame = this.resetGame.bind(this);\n        this.startGame = this.startGame.bind(this);\n        this.sendRotate = this.sendRotate.bind(this);\n        this.selectShipToPlace = this.selectShipToPlace.bind(this);\n        this.body = document.querySelector('body');\n\n        this.createElementsForShipPlacement();\n        this.createGameElements();\n        this.createElementsForStartPage();\n    }\n\n    createElementsForStartPage() {\n        this.introParent = _createElement__WEBPACK_IMPORTED_MODULE_0__[\"default\"].createElement('div', 'intro-wrapper');\n        this.introTitle = _createElement__WEBPACK_IMPORTED_MODULE_0__[\"default\"].createElement('h1', 'intro-title');\n        this.introMessage = _createElement__WEBPACK_IMPORTED_MODULE_0__[\"default\"].createElement('p', 'intro-message');\n        this.introButton = _createElement__WEBPACK_IMPORTED_MODULE_0__[\"default\"].createElement('button', 'intro-button');\n\n        this.introTitle.innerText = 'BATTLESHIP';\n        this.introMessage.innerText = \"Place the 5 ships of your fleet on the board.  Be the first to sink all 5 of your opponent's ships to win!\";\n        this.introButton.innerText = 'START GAME';\n\n        this.introButton.addEventListener('click', this.startGame);\n        this.introParent.appendChild(this.introTitle);\n        this.introParent.appendChild(this.introMessage);\n        this.introParent.appendChild(this.introButton);\n        this.body.textContent = '';\n        this.body.appendChild(this.introParent);\n    }\n\n    createElementsForShipPlacement() {\n        this.placementPreviewSpace = _createElement__WEBPACK_IMPORTED_MODULE_0__[\"default\"].createElement('div', 'placement-preview-space');\n\n        this.rotateButton = _createElement__WEBPACK_IMPORTED_MODULE_0__[\"default\"].createElement('button', 'rotate-button');\n        this.rotateButton.innerText = 'ROTATE';\n        this.rotateButton.addEventListener('click', this.sendRotate);\n\n        this.testGrid = _createElement__WEBPACK_IMPORTED_MODULE_0__[\"default\"].createElement('div', 'test-grid');\n        for (let i = 0; i < 25; i += 1) {\n            this.testGrid.appendChild(_createElement__WEBPACK_IMPORTED_MODULE_0__[\"default\"].createElement('div', 'testGrid-empty'));\n        }\n        this.testShip = _createElement__WEBPACK_IMPORTED_MODULE_0__[\"default\"].createElement('div', 'test-ship');\n        this.fleetWrapper = _createElement__WEBPACK_IMPORTED_MODULE_0__[\"default\"].createElement('div', 'fleet-wrapper');\n        this.fleetWrapper.addEventListener('click', this.selectShipToPlace);\n\n        this.addFleetButtons();\n\n        this.placementPreviewSpace.appendChild(this.rotateButton);\n        this.placementPreviewSpace.appendChild(this.testGrid);\n        this.placementPreviewSpace.appendChild(this.fleetWrapper);\n        this.testGrid.appendChild(this.testShip);\n    }\n\n    setShip(callback) {\n        this.selectShip = callback;\n    }\n\n    selectShipToPlace(e) {\n        this.selectShip(Number(e.target.dataset.index));\n    }\n\n    highlightFleetButton(index) {\n        for (let i = 0; i < this.fleetWrapper.childNodes.length; i += 1) {\n            if (Number(this.fleetWrapper.childNodes[i].dataset.index) === index) {\n                this.fleetWrapper.childNodes[i].classList.add('fleet-button-highlight');\n            } else {\n                this.fleetWrapper.childNodes[i].classList.remove('fleet-button-highlight');\n            }\n        }\n    }\n\n    addFleetButtons() {\n        for (let i = 0; i < this.domFleet.length; i += 1) {\n            const btn = _createElement__WEBPACK_IMPORTED_MODULE_0__[\"default\"].createElement('button', 'fleet-wrapper-button');\n            btn.style.gridColumn = `1 / span ${this.domFleet[i].length}`;\n            btn.dataset.index = i;\n            this.fleetWrapper.appendChild(btn);\n        }\n    }\n\n    removeAllFleetButtons() {\n        this.fleetWrapper.textContent = '';\n    }\n\n    removeFleetButton(index) {\n        for (let i = 0; i < this.fleetWrapper.childNodes.length; i += 1) {\n            if (Number(this.fleetWrapper.childNodes[i].dataset.index) === index) {\n                this.fleetWrapper.removeChild(this.fleetWrapper.childNodes[i]);\n            }\n        }\n    }\n\n    createGameElements() {\n        this.title = _createElement__WEBPACK_IMPORTED_MODULE_0__[\"default\"].createElement('div', 'game-title');\n        this.titleContent = _createElement__WEBPACK_IMPORTED_MODULE_0__[\"default\"].createElement('h1', 'game-title-content');\n        this.titleContent.innerText = 'BATTLESHIP';\n        this.title.appendChild(this.titleContent);\n\n        this.playingField = _createElement__WEBPACK_IMPORTED_MODULE_0__[\"default\"].createElement('div', 'playing-field');\n        this.playerField = _createElement__WEBPACK_IMPORTED_MODULE_0__[\"default\"].createElement('div', 'player-field');\n        this.cpuField = _createElement__WEBPACK_IMPORTED_MODULE_0__[\"default\"].createElement('div', 'player-field');\n        this.playerTitle = _createElement__WEBPACK_IMPORTED_MODULE_0__[\"default\"].createElement('h2', 'player-title');\n        this.playerTitle = _createElement__WEBPACK_IMPORTED_MODULE_0__[\"default\"].createElement('h2', 'player-title');\n        this.cpuTitle = _createElement__WEBPACK_IMPORTED_MODULE_0__[\"default\"].createElement('h2', 'player-title');\n        this.playerTitle.innerText = 'YOUR WATERS';\n        this.cpuTitle.innerText = 'CPU WATERS';\n\n        this.playerBoard = _createElement__WEBPACK_IMPORTED_MODULE_0__[\"default\"].createElement('div', 'player-field-grid');\n        this.cpuBoard = _createElement__WEBPACK_IMPORTED_MODULE_0__[\"default\"].createElement('div', 'player-field-grid');\n\n        this.playerMessage = _createElement__WEBPACK_IMPORTED_MODULE_0__[\"default\"].createElement('div', 'player-field-message');\n        this.cpuMessage = _createElement__WEBPACK_IMPORTED_MODULE_0__[\"default\"].createElement('div', 'player-field-message');\n        this.playerMessage.innerText = ' ';\n        this.cpuMessage.innerText = ' ';\n\n        this.stageInfo = _createElement__WEBPACK_IMPORTED_MODULE_0__[\"default\"].createElement('div', 'stage-info');\n        this.tempMessages = _createElement__WEBPACK_IMPORTED_MODULE_0__[\"default\"].createElement('h3', 'stage-temp-messages');\n        this.tempMessages.innerText = ' ';\n        this.stageInfo.appendChild(this.tempMessages);\n\n        this.playerField.appendChild(this.playerTitle);\n        this.playerField.appendChild(this.playerBoard);\n        this.playerField.appendChild(this.playerMessage);\n\n        this.cpuField.appendChild(this.cpuTitle);\n        this.cpuField.appendChild(this.cpuBoard);\n        this.cpuField.appendChild(this.cpuMessage);\n\n        this.resetField = _createElement__WEBPACK_IMPORTED_MODULE_0__[\"default\"].createElement('div', 'reset-field');\n        this.resetButton = _createElement__WEBPACK_IMPORTED_MODULE_0__[\"default\"].createElement('button', 'reset-field-button');\n        this.resetButton.innerText = 'RESET';\n        this.resetButton.addEventListener('click', this.resetGame);\n        this.resetField.appendChild(this.resetButton);\n\n        this.playingField.appendChild(this.playerField);\n        this.playingField.appendChild(this.placementPreviewSpace);\n        this.playingField.appendChild(this.cpuField);\n    }\n\n    setGameplayElements() {\n        this.body.textContent = '';\n        this.body.appendChild(this.title);\n        this.body.appendChild(this.stageInfo);\n        this.body.appendChild(this.playingField);\n        this.body.appendChild(this.resetField);\n\n        ShipDom.createGameboard(this.playerBoard);\n    }\n\n    reset() {\n        this.playerMessage.innerText = '';\n        this.cpuMessage.innerText = '';\n    }\n\n    setPlayerBoard(boardState) {\n        ShipDom.setBoard(this.playerBoard, boardState, 'player', false);\n    }\n\n    setCpuBoard(boardState) {\n        ShipDom.setBoard(this.cpuBoard, boardState, 'cpu', true);\n    }\n\n    setClickEventHandler(callback) {\n        this.clickCallback = callback;\n        this.playerBoard.addEventListener('click', callback);\n        this.cpuBoard.addEventListener('click', callback);\n    }\n\n    setHoverEventHandler(callback) {\n        this.playerBoard.addEventListener('mouseover', callback);\n    }\n\n    setMouseLeaveEventHandler(callback) {\n        this.playerBoard.addEventListener('mouseleave', callback);\n    }\n\n    setRightClickEventHandler(callback) {\n        this.playerBoard.addEventListener('contextmenu', callback, false);\n    }\n\n    setMessageFunction(fn) {\n        this.sendMessage = fn;\n    }\n\n    resetGame() {\n        this.sendMessage(_shipMessage__WEBPACK_IMPORTED_MODULE_1__.GameMessages.ResetGame);\n    }\n\n    static createGameboard(board) {\n        for (let i = 0; i < _shipMessage__WEBPACK_IMPORTED_MODULE_1__.BoardSize; i += 1) {\n            for (let j = 0; j < _shipMessage__WEBPACK_IMPORTED_MODULE_1__.BoardSize; j += 1) {\n                const square = _createElement__WEBPACK_IMPORTED_MODULE_0__[\"default\"].createElement('div', ['battleship-square--empty', 'battleship-square']);\n                board.appendChild(square);\n            }\n        }\n    }\n\n    static setBoard(board, boardState, player, hidden) {\n        while (board.lastChild) {\n            board.removeChild(board.firstChild);\n        }\n\n        for (let i = 0; i < boardState.length; i += 1) {\n            for (let j = 0; j < boardState[i].length; j += 1) {\n                const square = _createElement__WEBPACK_IMPORTED_MODULE_0__[\"default\"].createElement('div');\n                square.dataset.row = i;\n                square.dataset.col = j;\n                square.dataset.board = player;\n                square.classList.add('battleship-square');\n\n                switch (boardState[i][j]) {\n                case _shipMessage__WEBPACK_IMPORTED_MODULE_1__.BoardSpaceStatus.empty: {\n                    square.classList.add('battleship-square--empty');\n                    break;\n                }\n                case _shipMessage__WEBPACK_IMPORTED_MODULE_1__.BoardSpaceStatus.emptyHit: {\n                    square.classList.add('battleship-square--empty-hit');\n                    break;\n                }\n                case _shipMessage__WEBPACK_IMPORTED_MODULE_1__.BoardSpaceStatus.ship: {\n                    if (!hidden) {\n                        square.classList.add('battleship-square--ship');\n                    } else {\n                        square.classList.add('battleship-square--empty');\n                    }\n                    break;\n                }\n                case _shipMessage__WEBPACK_IMPORTED_MODULE_1__.BoardSpaceStatus.shipHit: {\n                    square.classList.add('battleship-square--ship-hit');\n                    break;\n                }\n                case _shipMessage__WEBPACK_IMPORTED_MODULE_1__.BoardSpaceStatus.shipSunk: {\n                    square.classList.add('battleship-square--ship-sunk');\n                    break;\n                }\n                default:\n                    break;\n                }\n                board.appendChild(square);\n            }\n        }\n    }\n\n    getPlayerMove(row, col, status) {\n        ShipDom.getMove(row, col, status, this.cpuBoard);\n        if (status === _shipMessage__WEBPACK_IMPORTED_MODULE_1__.AttackStatus.sunk) {\n            this.sendMessage(_shipMessage__WEBPACK_IMPORTED_MODULE_1__.GameMessages.DrawCpuBoard);\n        }\n        this.setCpuMessage(status);\n    }\n\n    getCpuMove(row, col, status) {\n        ShipDom.getMove(row, col, status, this.playerBoard);\n        if (status === _shipMessage__WEBPACK_IMPORTED_MODULE_1__.AttackStatus.sunk) {\n            this.sendMessage(_shipMessage__WEBPACK_IMPORTED_MODULE_1__.GameMessages.DrawCpuBoard);\n        }\n        this.setPlayerMessage(status);\n    }\n\n    static getMove(row, col, status, board) {\n        const squares = board.querySelectorAll('.battleship-square');\n\n        for (let i = 0; i < squares.length; i += 1) {\n            if (\n                Number(squares[i].dataset.row) === row\n                && Number(squares[i].dataset.col) === col\n            ) {\n                squares[i].className = '';\n                squares[i].classList.add('battleship-square');\n\n                if (Number(status) === _shipMessage__WEBPACK_IMPORTED_MODULE_1__.AttackStatus.hit) {\n                    squares[i].classList.add('battleship-square--ship-hit');\n                } else if (Number(status) === _shipMessage__WEBPACK_IMPORTED_MODULE_1__.AttackStatus.sunk) {\n                    squares[i].classList.add('battleship-square--ship-sunk');\n                } else if (Number(status) === _shipMessage__WEBPACK_IMPORTED_MODULE_1__.AttackStatus.miss) {\n                    squares[i].classList.add('battleship-square--empty-hit');\n                } break;\n            }\n        }\n    }\n\n    setPlayerMessage(status) {\n        this.playerMessage.textContent = '';\n        this.playerMessage.classList.remove('message');\n        // eslint-disable-next-line no-unused-expressions\n        this.playerMessage.offsetHeight;\n        this.playerMessage.classList.add('message');\n\n        const message1 = 'Your opponent ';\n        let message2 = '';\n        let message3 = '';\n\n        if (status === _shipMessage__WEBPACK_IMPORTED_MODULE_1__.AttackStatus.hit) {\n            message2 = \"<span class='hit-message'>hit</span>\";\n            message3 = ' one of your ships.';\n        } else if (status === _shipMessage__WEBPACK_IMPORTED_MODULE_1__.AttackStatus.sunk) {\n            message2 = \"<span class='sunk-message'>sunk</span>\";\n            message3 = ' one of your ships';\n        } else if (status === _shipMessage__WEBPACK_IMPORTED_MODULE_1__.AttackStatus.miss) {\n            message2 = \"<span class = 'miss-message'>missed!</span>\";\n            message3 = '';\n        }\n        this.playerMessage.innerHTML = `${message1}${message2}${message3}`;\n    }\n\n    setCpuMessage(status) {\n        this.cpuMessage.textContent = '';\n        this.cpuMessage.classList.remove('message');\n        // eslint-disable-next-line no-unused-expressions\n        this.cpuMessage.offsetHeight;\n        this.cpuMessage.classList.add('message');\n\n        const message1 = 'You ';\n        let message2 = '';\n        let message3 = '';\n\n        if (status === _shipMessage__WEBPACK_IMPORTED_MODULE_1__.AttackStatus.hit) {\n            message2 = \"<span class = 'hit-message'>hit</span>\";\n            message3 = \" the opponent's ship\";\n        } else if (status === _shipMessage__WEBPACK_IMPORTED_MODULE_1__.AttackStatus.sunk) {\n            message2 = \"<span class = 'sunk-message'>sunk</span>\";\n            message3 = \" one of the opponent's ship\";\n        } else if (status === _shipMessage__WEBPACK_IMPORTED_MODULE_1__.AttackStatus.miss) {\n            message2 = \"<span class = 'miss-message'>missed!</span>\";\n            message3 = '';\n        }\n        this.cpuMessage.innerHTML = `${message1}${message2}${message3}`;\n    }\n\n    displayMessage(value) {\n        if (value === '') {\n            this.tempMessages.style.display = 'none';\n        } else {\n            this.tempMessages.style.display = 'block';\n        }\n        this.tempMessages.innerText = value;\n    }\n\n    highlightSquares(squaresToHighlight, valid) {\n        if (squaresToHighlight !== undefined) {\n            const squares = this.playerBoard.querySelectorAll('.battleship-square');\n            for (let i = 0; i < squares.length; i += 1) {\n                for (let j = 0; j < squaresToHighlight.length; j += 1) {\n                    if (\n                        Number(squares[i].dataset.row) === squaresToHighlight[j].rowVar\n                        && Number(squares[i].dataset.col) === squaresToHighlight[j].colVar\n                    ) {\n                    // highlight\n                        if (valid) {\n                            squares[i].classList.add('battleship-square--place-highlight');\n                        } else {\n                            squares[i].classList.add(\n                                'battleship-square--place-highlight-invalid',\n                            );\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    removeHighlightSquares() {\n        const squares = this.playerBoard.querySelectorAll('.battleship-square');\n        for (let i = 0; i < squares.length; i += 1) {\n            squares[i].classList.remove('battleship-square--place-highlight');\n            squares[i].classList.remove('battleship-square--place-highlight-invalid');\n        }\n    }\n\n    hideCpuBoard() {\n        this.cpuField.classList.add('hidden');\n    }\n\n    showCpuBoard() {\n        this.cpuField.classList.remove('hidden');\n    }\n\n    startGame() {\n        this.sendMessage(_shipMessage__WEBPACK_IMPORTED_MODULE_1__.GameMessages.StartGame);\n    }\n\n    smallPlayerBoard() {\n        this.playerBoard.classList.add('player-field-grid--mini');\n    }\n\n    normalPlayerBoard() {\n        this.playerBoard.classList.remove('player-field-grid--mini');\n    }\n\n    rotateTestShip(length, direction) {\n        let colStart = 1;\n        let rowStart = 1;\n        // possible issue here in future\n        switch (length) {\n        case 2: {\n            colStart = 3;\n            rowStart = 3;\n            break;\n        }\n        case 3: {\n            if (direction === _shipMessage__WEBPACK_IMPORTED_MODULE_1__.Direction.left || direction === _shipMessage__WEBPACK_IMPORTED_MODULE_1__.Direction.right) {\n                colStart = 2;\n                rowStart = 3;\n            } else {\n                colStart = 3;\n                rowStart = 2;\n            }\n            break;\n        }\n        case 4:\n        case 5: {\n            if (direction === _shipMessage__WEBPACK_IMPORTED_MODULE_1__.Direction.left || direction === _shipMessage__WEBPACK_IMPORTED_MODULE_1__.Direction.right) {\n                colStart = 1;\n                rowStart = 3;\n            } else {\n                colStart = 3;\n                rowStart = 1;\n            }\n            break;\n        }\n        default: {\n            break;\n        }\n        }\n\n        if (direction === _shipMessage__WEBPACK_IMPORTED_MODULE_1__.Direction.left || direction === _shipMessage__WEBPACK_IMPORTED_MODULE_1__.Direction.right) {\n            this.testShip.style.gridColumn = `${colStart} / span ${length}`;\n            this.testShip.style.gridRow = `${rowStart}`;\n        } else {\n            this.testShip.style.gridRow = `${rowStart} / span ${length}`;\n            this.testShip.style.gridColumn = `${colStart}`;\n        }\n    }\n\n    sendRotate() {\n        this.sendMessage(_shipMessage__WEBPACK_IMPORTED_MODULE_1__.GameMessages.Rotate);\n    }\n\n    hidePlacementOptions() {\n        this.placementPreviewSpace.style.display = 'none';\n    }\n\n    showPlacementOptions() {\n        this.placementPreviewSpace.style.display = 'flex';\n    }\n}\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (ShipDom);\n\n\n//# sourceURL=webpack://project-battleship/./src/ship/createShips.js?");

/***/ }),

/***/ "./src/ship/ship.js":
/*!**************************!*\
  !*** ./src/ship/ship.js ***!
  \**************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\nclass Ship {\n    static hitStatus = { unHit: 0, hit: 1 };\n\n    constructor(length) {\n        this.status = new Array(length);\n        for (let i = 0; i < length; i += 1) {\n            this.status[i] = Ship.hitStatus.unHit;\n        }\n    }\n\n    reset() {\n        for (let i = 0; i < this.status.length; i += 1) {\n            this.status[i] = Ship.hitStatus.unHit;\n        }\n    }\n\n    hit(index) {\n        if (index < this.status.length) {\n            this.status[index] = Ship.hitStatus.hit;\n        }\n    }\n\n    get isSunk() {\n        let sunk = true;\n        for (let i = 0; i < this.status.length; i += 1) {\n            if (this.status[i] === Ship.hitStatus.unHit) {\n                sunk = false;\n            }\n        }\n        return sunk;\n    }\n\n    get length() {\n        return this.status.length;\n    }\n}\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Ship);\n\n\n//# sourceURL=webpack://project-battleship/./src/ship/ship.js?");

/***/ }),

/***/ "./src/ship/shipMessage.js":
/*!*********************************!*\
  !*** ./src/ship/shipMessage.js ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"GameState\": () => (/* binding */ GameState),\n/* harmony export */   \"GameMessages\": () => (/* binding */ GameMessages),\n/* harmony export */   \"BoardSpaceStatus\": () => (/* binding */ BoardSpaceStatus),\n/* harmony export */   \"Direction\": () => (/* binding */ Direction),\n/* harmony export */   \"AttackStatus\": () => (/* binding */ AttackStatus),\n/* harmony export */   \"BoardSize\": () => (/* binding */ BoardSize),\n/* harmony export */   \"ShipNames\": () => (/* binding */ ShipNames)\n/* harmony export */ });\nconst GameState = {\n    playerTurn: 0,\n    cpuTurn: 1,\n    gameEnd: 2,\n    transition: 3,\n    preGame: 4,\n    placingShips: 5,\n    welcome: 6,\n    gameStart: 7,\n    reset: 8,\n};\n\nconst GameMessages = {\n    StartGame: 0,\n    DrawCpuBoard: 1,\n    DrawPlayerBoard: 2,\n    ResetGame: 3,\n    Rotate: 4,\n};\n\nconst BoardSpaceStatus = {\n    empty: 0,\n    emptyHit: 1,\n    ship: 2,\n    shipHit: 3,\n    shipSunk: 4,\n};\n\nconst Direction = {\n    right: 0,\n    down: 1,\n    left: 2,\n    up: 3,\n};\n\nconst AttackStatus = {\n    hit: 0,\n    miss: 1,\n    sunk: 2,\n    invalid: 3,\n};\n\nconst BoardSize = 8;\n\nconst ShipNames = [\n    'Carrier',\n    'Battleship',\n    'Cruiser',\n    'Submarine',\n    'Destroyer',\n];\n\n\n\n\n//# sourceURL=webpack://project-battleship/./src/ship/shipMessage.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./src/index.js");
/******/ 	
/******/ })()
;